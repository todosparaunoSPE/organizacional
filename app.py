# -*- coding: utf-8 -*-
"""
Created on Thu Aug 28 15:54:53 2025

@author: jahop
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import os

st.set_page_config(page_title="Capital Humano - Evaluaci√≥n y Talento", page_icon="üíº", layout="wide")

# --- Funci√≥n para cargar archivo autom√°ticamente ---
def cargar_archivo_automatico(nombre_archivo, key_suffix):
    # Primero intenta cargar el archivo autom√°ticamente
    if os.path.exists(nombre_archivo):
        try:
            df = pd.read_excel(nombre_archivo)
            st.success(f"‚úÖ Archivo '{nombre_archivo}' cargado autom√°ticamente")
            return df
        except Exception as e:
            st.warning(f"No se pudo cargar '{nombre_archivo}': {e}")
    
    # Si no existe o hay error, muestra el uploader
    uploaded_file = st.file_uploader(f"üìé Sube archivo {nombre_archivo} (xlsx)", 
                                   type=["xlsx"], 
                                   key=f"upload_{key_suffix}")
    if uploaded_file:
        return pd.read_excel(uploaded_file)
    
    return None

# --- Men√∫ lateral ---
st.sidebar.title("Men√∫")
menu = st.sidebar.radio("Ir a:", ["Evaluaci√≥n de Desempe√±o y Clima", "Gesti√≥n del Cambio", "An√°lisis del Talento"])

# --- 1. Evaluaci√≥n de desempe√±o y clima laboral ---
if menu == "Evaluaci√≥n de Desempe√±o y Clima":
    st.header("üìä Evaluaci√≥n de Desempe√±o y Clima Laboral")
    st.write("Resultados de encuestas aplicadas al personal")

    df = cargar_archivo_automatico("evaluaciones.xlsx", "eval")
    
    if df is not None:
        st.dataframe(df, use_container_width=True)

        # Distribuci√≥n de satisfacci√≥n
        if "Satisfacci√≥n" in df.columns:
            fig = px.histogram(df, x="Satisfacci√≥n", title="Distribuci√≥n de Satisfacci√≥n")
            st.plotly_chart(fig, use_container_width=True)

        # Promedio de desempe√±o
        if "Desempe√±o" in df.columns:
            avg = df["Desempe√±o"].mean()
            st.metric("Promedio de Desempe√±o", f"{avg:.2f}")

# --- 2. Estrategias de gesti√≥n del cambio ---
elif menu == "Gesti√≥n del Cambio":
    st.header("üîÑ Estrategias de Gesti√≥n del Cambio")
    st.write("Monitoreo de indicadores clave durante procesos de cambio organizacional.")

    df = cargar_archivo_automatico("indicadores.xlsx", "change")
    
    if df is not None:
        st.dataframe(df, use_container_width=True)

        if "Resistencia" in df.columns and "Comunicaci√≥n" in df.columns:
            fig = px.scatter(df, x="Comunicaci√≥n", y="Resistencia", color="Liderazgo", size="Avance",
                             title="Relaci√≥n Comunicaci√≥n vs Resistencia al Cambio")
            st.plotly_chart(fig, use_container_width=True)

# --- 3. Herramientas de an√°lisis del talento ---
elif menu == "An√°lisis del Talento":
    st.header("üåü Herramientas de An√°lisis del Talento")
    st.write("Identificaci√≥n de alto potencial y necesidades de desarrollo.")

    # Carga autom√°tica del archivo talento.xlsx
    df = cargar_archivo_automatico("talento.xlsx", "talento")
    
    if df is not None:
        st.dataframe(df, use_container_width=True)

        if "Desempe√±o" in df.columns and "Potencial" in df.columns:
            fig = px.scatter(df, x="Desempe√±o", y="Potencial", color="Departamento",
                             title="Matriz 9-Box (Potencial vs Desempe√±o)")
            st.plotly_chart(fig, use_container_width=True)

        # Ranking de talento
        if "Desempe√±o" in df.columns and "Potencial" in df.columns:
            df["Score Talento"] = df["Desempe√±o"]*0.6 + df["Potencial"]*0.4
            df = df.sort_values("Score Talento", ascending=False)
            st.subheader("üèÜ Ranking de Talento")
            st.dataframe(df[["Nombre", "Departamento", "Desempe√±o", "Potencial", "Score Talento"]])
